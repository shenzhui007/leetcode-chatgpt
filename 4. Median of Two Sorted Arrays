class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        m, n = len(nums1), len(nums2)
        if m > n:
            # Make sure that nums1 is the shorter array
            nums1, nums2, m, n = nums2, nums1, n, m
        
        # We will do a binary search on nums1
        left, right = 0, m
        while left <= right:
            i = (left + right) // 2
            j = (m + n + 1) // 2 - i
            if j > 0 and i < m and nums2[j - 1] > nums1[i]:
                # i is too small, must increase it
                left = i + 1
            elif i > 0 and j < n and nums1[i - 1] > nums2[j]:
                # i is too big, must decrease it
                right = i - 1
            else:
                # i is perfect
                if i == 0:
                    max_of_left = nums2[j - 1]
                elif j == 0:
                    max_of_left = nums1[i - 1]
                else:
                    max_of_left = max(nums1[i - 1], nums2[j - 1])
                
                if (m + n) % 2 == 1:
                    # If the total number of elements is odd, the median is the middle element
                    return max_of_left
                
                if i == m:
                    min_of_right = nums2[j]
                elif j == n:
                    min_of_right = nums1[i]
                else:
                    min_of_right = min(nums1[i], nums2[j])
                
                # If the total number of elements is even, the median is the average of the two middle elements
                return (max_of_left + min_of_right) / 2
