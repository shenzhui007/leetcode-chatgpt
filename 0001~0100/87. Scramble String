class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:
        # If the strings are not the same length, return False
        if len(s1) != len(s2):
            return False
        # If the strings are the same, return True
        if s1 == s2:
            return True
        # Check if the strings are permutations of each other
        if sorted(s1) != sorted(s2):
            return False
        # Initialize a 3D array to store the scramble results
        n = len(s1)
        dp = [[[False] * (n + 1) for _ in range(n)] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                dp[i][j][1] = s1[i] == s2[j]
        # Fill in the array using the formula above
        for k in range(2, n+1):
            for i in range(n - k + 1):
                for j in range(n - k + 1):
                    for l in range(1, k):
                        if (dp[i][j][l] and dp[i+l][j+l][k-l]) or (dp[i][j+k-l][l] and dp[i+l][j][k-l]):
                            dp[i][j][k] = True
                            break
        return dp[0][0][n]
