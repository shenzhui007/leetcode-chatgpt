class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return 0

        max_num = max(nums)
        exp = 1
        radix = 10

        # Perform counting sort for each digit
        while max_num // exp > 0:
            counting_sort(nums, exp, radix)
            exp *= radix

        max_diff = 0
        for i in range(1, len(nums)):
            max_diff = max(max_diff, nums[i] - nums[i - 1])

        return max_diff

def counting_sort(nums, exp, radix):
    n = len(nums)
    output = [0] * n
    count = [0] * radix

    # Store count of occurrences in count[]
    for i in range(n):
        index = (nums[i] // exp) % radix
        count[index] += 1

    # Change count[i] so that count[i] now contains actual
    # position of this digit in output[]
    for i in range(1, radix):
        count[i] += count[i - 1]

    # Build the output array
    i = n - 1
    while i >= 0:
        index = (nums[i] // exp) % radix
        output[count[index] - 1] = nums[i]
        count[index] -= 1
        i -= 1

    # Copy the output array to arr[], so that arr[] now
    # contains sorted numbers according to current digit
    for i in range(n):
        nums[i] = output[i]
