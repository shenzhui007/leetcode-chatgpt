class Solution:
    def myAtoi(self, s: str) -> int:
        # Read in and ignore any leading whitespace.
        i = 0
        while i < len(s) and s[i] == ' ':
            i += 1
        
        # Check if the next character (if not already at the end of the string) is '-' or '+'.
        # Read this character in if it is either. This determines if the final result is negative or positive respectively.
        # Assume the result is positive if neither is present.
        sign = 1
        if i < len(s):
            if s[i] == '-':
                sign = -1
                i += 1
            elif s[i] == '+':
                i += 1
        
        # Read in next the characters until the next non-digit character or the end of the input is reached.
        # The rest of the string is ignored.
        num = 0
        while i < len(s) and s[i].isdigit():
            num = num * 10 + int(s[i])
            i += 1
        
        # Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32).
        # If no digits were read, then the integer is 0.
        # Change the sign as necessary (from step 2).
        num *= sign
        
        # If the integer is out of the 32-bit signed integer range [-231, 231 - 1],
        # then clamp the integer so that it remains in the range.
        # Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
        INT_MIN = -2147483648
        INT_MAX = 2147483647
        if num < INT_MIN:
            return INT_MIN
        elif num > INT_MAX:
            return INT_MAX
        else:
            return num
