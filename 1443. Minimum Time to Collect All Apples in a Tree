class Solution:
    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:
        def dfs(node, parent):
            time = 0
            for child in graph[node]:
                if child != parent:
                    time += dfs(child, node)
            if time > 0 or hasApple[node]:
                if parent != -1: # if it's not root node
                    time += 2
            return time

        graph = [[] for _ in range(n)]
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        return dfs(0, -1)
