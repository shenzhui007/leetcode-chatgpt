# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # Edge case: if the linked list is empty
        if not head:
            return None

        # Edge case: if the linked list has only one element
        if not head.next:
            return None

        # Create a dummy node to simplify the edge cases
        dummy = ListNode(0)
        dummy.next = head
        first = dummy
        second = dummy

        # Advance the first pointer so that it is n nodes ahead of the second pointer
        for i in range(n):
            first = first.next

        # Advance both pointers until the first pointer reaches the end of the list
        while first.next:
            first = first.next
            second = second.next

        # Remove the nth node from the end by updating the second pointer's next reference
        second.next = second.next.next

        return dummy.next
