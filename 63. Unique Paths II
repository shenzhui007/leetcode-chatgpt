class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        # Initialize a 2D array to store the number of paths to each cell
        paths = [[0] * len(obstacleGrid[0]) for _ in range(len(obstacleGrid))]

        # Check if the starting cell is an obstacle
        if obstacleGrid[0][0] == 1:
            return 0

        # Set the number of paths to the first cell to be 1
        paths[0][0] = 1

        # Fill in the first row and first column of the array, considering obstacles
        for i in range(1, len(obstacleGrid)):
            if obstacleGrid[i][0] == 0:
                paths[i][0] = paths[i-1][0]
            else:
                paths[i][0] = 0
        for j in range(1, len(obstacleGrid[0])):
            if obstacleGrid[0][j] == 0:
                paths[0][j] = paths[0][j-1]
            else:
                paths[0][j] = 0

        # Calculate the number of paths for the rest of the cells, considering obstacles
        for i in range(1, len(obstacleGrid)):
            for j in range(1, len(obstacleGrid[0])):
                if obstacleGrid[i][j] == 0:
                    paths[i][j] = paths[i-1][j] + paths[i][j-1]
                else:
                    paths[i][j] = 0

        return paths[-1][-1]
