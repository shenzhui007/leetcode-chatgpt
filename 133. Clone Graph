"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        # create a dictionary to store the mapping between original nodes and the cloned nodes
        mapping = {}
        # Use DFS traversal to traverse the graph and create the cloned nodes
        def dfs(node):
            if not node:
                return
            if node in mapping:
                return mapping[node]
            new_node = Node(node.val, [])
            mapping[node] = new_node
            for neighbor in node.neighbors:
                new_node.neighbors.append(dfs(neighbor))
            return new_node
        return dfs(node)
