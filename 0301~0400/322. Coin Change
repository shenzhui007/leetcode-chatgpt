class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # Create a list to store the minimum number of coins needed to reach each amount from 0 to amount
        # Initialize the list with a value larger than the maximum amount possible (amount + 1)
        dp = [amount + 1] * (amount + 1)
        # Set the minimum number of coins needed to reach 0 to be 0
        dp[0] = 0
        # Loop through all possible amounts from 1 to amount
        for i in range(1, amount + 1):
            # Loop through all possible coins
            for coin in coins:
                # If the coin is smaller or equal to the current amount, try using it to make change
                if coin <= i:
                    # Update the minimum number of coins needed to reach the current amount
                    dp[i] = min(dp[i], dp[i - coin] + 1)
        # If the minimum number of coins needed to reach the amount is still the initial value, return -1
        if dp[amount] == amount + 1:
            return -1
        # Otherwise, return the minimum number of coins needed
        return dp[amount]
