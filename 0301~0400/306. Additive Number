class Solution:
    def isAdditiveNumber(self, num: str) -> bool:
        def dfs(num, start, first, second):
            # Base case: reached the end of the string
            if start == len(num):
                return True
            for i in range(start, len(num)):
                # Ignore numbers with leading zeros
                if i > start and num[start] == '0':
                    break
                curr = int(num[start:i+1])
                # Check if curr is equal to the sum of first and second
                if curr == first + second:
                    # Recursive call with new parameters
                    if dfs(num, i+1, second, curr):
                        return True
                # If curr is greater than the sum of first and second, exit the loop
                elif curr > first + second:
                    break
            return False
        
        # Iterate over all possible combinations of first and second numbers
        for i in range(1, len(num)):
            if num[0] == '0' and i > 1:  # Ignore numbers with leading zeros
                break
            first = int(num[:i])
            for j in range(i+1, len(num)):
                if num[i] == '0' and j > i+1:  # Ignore numbers with leading zeros
                    break
                second = int(num[i:j])
                if dfs(num, j, first, second):
                    return True
        return False
