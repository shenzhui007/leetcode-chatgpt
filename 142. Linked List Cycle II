# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize two pointers, one moving faster and one moving slower
        slow = head
        fast = head
        
        # Move both pointers until the end of the list or a cycle is detected
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
            # If the pointers meet, there is a cycle in the list
            if slow == fast:
                slow = head
                while slow != fast:
                    slow = slow.next
                    fast = fast.next
                return slow
        
        # If the pointers do not meet, there is no cycle in the list
        return None
