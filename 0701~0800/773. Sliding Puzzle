class Solution:
    def slidingPuzzle(self, board: List[List[int]]) -> int:
        # Target board
        target = [[1, 2, 3], [4, 5, 0]]
        
        # Convert the board to a string for easier comparison
        board_str = ''.join(str(num) for row in board for num in row)
        
        # Set of visited board configurations
        visited = set([board_str])
        
        # Possible moves
        moves = {0: [1, 3], 1: [0, 2, 4], 2: [1, 5], 3: [0, 4], 4: [1, 3, 5], 5: [2, 4]}
        
        # Initialize the queue with the initial board state and its depth
        queue = deque([(board_str, 0)])
        
        while queue:
            current_board, depth = queue.popleft()
            
            # Check if we reached the target board
            if current_board == ''.join(str(num) for row in target for num in row):
                return depth
            
            # Find the position of the empty square (0)
            zero_index = current_board.index('0')
            
            # Generate next possible states
            for move in moves[zero_index]:
                new_board = list(current_board)
                new_board[zero_index], new_board[move] = new_board[move], new_board[zero_index]
                new_board_str = ''.join(new_board)
                
                # Check if the new state has been visited
                if new_board_str not in visited:
                    visited.add(new_board_str)
                    queue.append((new_board_str, depth + 1))
        
        # If we reach here, it means the target state is unreachable
        return -1
