class Solution:
    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        row, col = click[0], click[1]
        if board[row][col] == 'M':
            # Revealed a mine, game over
            board[row][col] = 'X'
            return board
        
        # Check adjacent squares for mines
        mines = 0
        for i in range(-1, 2):
            for j in range(-1, 2):
                if i == 0 and j == 0:
                    continue
                r, c = row + i, col + j
                if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]):
                    continue
                if board[r][c] == 'M' or board[r][c] == 'X':
                    mines += 1
        
        if mines > 0:
            # Revealed an empty square with adjacent mines
            board[row][col] = str(mines)
        else:
            # Revealed an empty square with no adjacent mines
            board[row][col] = 'B'
            for i in range(-1, 2):
                for j in range(-1, 2):
                    if i == 0 and j == 0:
                        continue
                    r, c = row + i, col + j
                    if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]):
                        continue
                    if board[r][c] == 'E':
                        self.updateBoard(board, [r, c])
        
        return board
