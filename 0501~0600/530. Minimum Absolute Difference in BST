# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        self.prev = None  # store the previous node's value during traversal
        self.min_diff = float('inf')  # initialize the minimum difference to infinity
        
        def inorder_traversal(node: TreeNode) -> None:
            if node:
                inorder_traversal(node.left)
                if self.prev is not None:
                    self.min_diff = min(self.min_diff, abs(node.val - self.prev))
                self.prev = node.val
                inorder_traversal(node.right)
        
        inorder_traversal(root)  # perform the inorder traversal starting from root
        return self.min_diff
