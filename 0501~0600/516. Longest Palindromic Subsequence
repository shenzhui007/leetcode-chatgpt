class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        n = len(s)
        # initialize dp table with all zeros
        dp = [[0] * n for _ in range(n)]
        
        # base case: length 1 palindrome
        for i in range(n):
            dp[i][i] = 1
        
        # fill dp table diagonally
        for l in range(2, n+1):
            for i in range(n-l+1):
                j = i + l - 1
                if s[i] == s[j]:
                    dp[i][j] = dp[i+1][j-1] + 2
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        
        return dp[0][n-1]
