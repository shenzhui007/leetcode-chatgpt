# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []

        # dictionary to store frequency of each node value
        freq = {}

        # traverse the tree in order and count the frequency of each node value
        def traverse(node):
            if not node:
                return

            traverse(node.left)
            freq[node.val] = freq.get(node.val, 0) + 1
            traverse(node.right)

        traverse(root)

        # get the maximum frequency of any node value
        max_freq = max(freq.values())

        # create a list of all node values that have the maximum frequency
        modes = [k for k, v in freq.items() if v == max_freq]

        return modes
